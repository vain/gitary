.TH GITARY 1  "June 2012" "Git-Diary" "A diary using Git"
.SH NAME
gitary \- a diary using
.BR git (1)
as a backend.
.SH SYNOPSIS
\fBgitary\fP [\fIOPTION\fP]...
.SH DESCRIPTION
Without any options, \fBgitary\fP starts your favourite editor to edit
the entry for the current day. When you leave the editor, anything
you've changed in the data directory will be automatically committed
into the git repository. That means that \(em while writing your entry
\(em you can place arbitrary files in the data directory. This allows
you to store pictures or programs as well.
.SH OPTIONS
All of these options are optional and mutual exclusive. Note that they
can start with one, two or no dashes.
.TP
\fB\-\-search\fP \fIword ...\fP
Search entire entries and print items that include one of the words or a
part of them.
.TP
\fB\-\-tags\fP \fIword ...\fP
Same as \fB\-\-search\fP, but only search in taglines.
.TP
\fB\-\-refs\fP \fIword ...\fP
Search in references. Prints out each entry if it contains a reference
like \fI\(lq\-\- Einstein\(rq\fP or \fI\(lq[1] www.archlinux.org\(rq\fP.
That is, references start with two dashes and one blank at the beginning
of a line \(em but you can also use a number in square brackets instead.
.TP
.PD 0
\fB\-\-edit\fP \fIday\fP
.TP
.PD
\fB\-\-view\fP \fIday\fP
Edit the given day. Expects the format \fIYYYY\-MM\-DD\fP, i.e.
\fI2009\-09\-31\fP.

\fB\-\-view\fP is an alias for \fB\-\-edit\fP. That's because if there's
a \fB\-\-viewall\fP (see below), then there must be a simple
\fB\-\-view\fP, too.

Note that you can't view an entry in read-only mode.
.TP
\fB\-\-gitk\fP
Launch \fBgitk\fP(1) in the data directory.
.TP
\fB\-\-viewall\fP
Show all entries in chronological order in the program specified in
your \fB$PAGER\fP environment variable.
.TP
\fB\-\-alltopics\fP [\fIdate\fP [\fIdate\fP]]
Only show topics. \fIdate\fP can be one of \fIYYYY\fP, \fIYYYY-MM\fP or
\fIYYYY-MM-DD\fP. If only one \fIdate\fP is given, show all topics of
this date. That is, \(lq\-\-alltopics 2009-11\(rq shows all topics of
November 2009. Accordingly, \(lq\-\-alltopics 2010-02-03\(rq shows all
topics of the 3rd of February 2010.

If two \fIdate\fPs are given, then show all topics written during that
period of time. \(lq\-\-alltopics 2009-11 2010-03-12\(rq will show all
topics from the 1st of November 2009 until the 12th of March 2010
(inclusively).
.TP
\fB\-\-alltags\fP [\fIdate\fP [\fIdate\fP]]
For each day, show all tags. See \fB\-\-alltopics\fP on how to specify
date ranges.
.TP
\fB\-\-tagcloud\fP [\fIdate\fP [\fIdate\fP]]
Collect all tags and count them. This allows you to generate a tag cloud
with the use of other external tools. See \fB\-\-alltopics\fP on how to
specify date ranges.
.TP
\fB\-\-addblobs\fP [\fB\-t\fP \fItag\fP] \fIfile\fP [\fIfile ...\fP]
Add all files to today's blobs. That is, a directory called
\(lqblobs\(rq will be created in your data directory. Below this, a
subdirectory for each day will be created (like
\(lq\fIblobs/2012-06-07/\fP\(rq). \fBgitary\fP will never overwrite
existing files.

Using \fB\-t\fP you can specify a \(lqtag\(rq for your blobs.
Essentially, a subdirectory with that name will be created in today's
blobs (like \fB\-t code\fP for \(lq\fIblobs/2012-06-07/code/\fP).

Note: Unlike other options, you can't omit the leading dash in
\fB\-t\fP.
.TP
\fB\-\-printblobdir\fP
Prints the absolute path to your blob directory on \fIstdout\fP. This
can be used to create a shell alias like this:

\f(CW
.nf
	alias gblobs='cd -- "$(gitary --printblobdir)"'
.fi
\fP
.SH CONFIGURATION
All your entries are stored in the data directory. A git repository will
reside in this directory. By default, \fI$XDG_DATA_HOME/gitary\fP will
be used or \fI$HOME/.local/share/gitary\fP if \fB$XDG_DATA_HOME\fP is
not set.
.P
Use the environment variable \fB$GITARY_DATA\fP to change this. If it's
set, then this directory is used.
.P
You have to do a \fBgit init\fP in the data repository before you can
use this script. However, if the directory does not exist, the script
will ask you what to do.
.P
\fBgitary\fP uses whichever \fB$EDITOR\fP and \fB$PAGER\fP you
configured in your \fI~/.profile\fP.
.SH SYNTAX
Each entry should follow the following format:
.P
\f(CW
.nf
	=== Topics of today ===
	tags: linux git

	Today I discovered Git. It rocks. Can be downloaded from [1].

	Some code:
	---8<---
	$ git init whatever
	$ touch hello
	$ git add hello && git ci -m 'Initial'
	---8<---

	[1] http://git-scm.com/

	Some further references:
	-- http://en.wikiquote.org/wiki/Einstein
	-- http://en.wikiquote.org/wiki/Monty_Python%27s_Flying_Circus
.fi
\fP
.P
The head line is mandatory as is the \(lqtags\(rq line. The search
routines use the head line to split up entries. Also, there's a special
search function that can search in the \(lqtags\(rq line only (using
\fB\-\-tags\fP). All other content can be free form. However, there's a
special search function for \(lqreferences\(rq, too (using
\fB\-\-refs\fP).
.P
There's a syntax highlighting scheme for \fBvim\fR(1) ready to be used
in the \fI.vim/\fP subdirectory. Thus, you should get the best
experience when using this script together with \fBvim\fP. If you use
it, you can also add the language of code areas:
.P
\f(CW
.nf
	This will be highlighted as a regular bash script:
	---8<---bash
	for i in *
	do
		echo "<$i>"
	done
	---8<---

	That's a python script:
	---8<---python
	print "Hello world."
	---8<---
.fi
\fP
.P
Currently, there's support for \fBbash\fP, \fBpython\fP, \fBruby\fP,
\fBjava\fP, \fBc\fP, \fBlua\fP, \fBvim\fP, \fBassembly\fP and
\fBdiff\fP.
.SH DEPENDENCIES
In order to run \fBgitary\fP, the following tools must be installed:
.IP \(bu 4
GNU bash,
.IP \(bu 4
GNU awk,
.IP \(bu 4
GNU sed,
.IP \(bu 4
git.
.P
Ideally, you should have to most recent versions installed.
.SH FILES
.TP
.PD 0
\fI$XDG_DATA_HOME/gitary/\fP
.TP
.PD
\fI$HOME/.local/share/gitary/\fP
Default per-user data directory if \fB$GITARY_DATA\fP is not set. The
\fB$HOME\fP variant is only used if \fB$XDG_DATA_HOME\fP is not set.
.SH BUGS
Currently, no bugs are known. If you find one, we invite you to report
it at the GitHub Issue tracker (http://github.com/vain/gitary/issues).
.SH LICENSE
\fBgitary\fP is released as \(lqPIZZA-WARE\(rq. See the accompanying
\fILICENSE\fP file.
.SH HISTORY
\fBgitary\fP was originally written by Peter Hofmann. The project was
started in August 2009.
.SH "SEE ALSO"
.BR git (1),
.BR gitk (1),
.BR awk (1),
.BR sed (1),
.BR bash (1),
.BR vim (1).
