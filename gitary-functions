#!/bin/bash

commit()
{
	(
		cd "$datadir"
		git add .
		git commit -a -m "Auto-Commit $(date +'%F, %T')."
	)
}

search()
{
	# Only search in tags or the whole entry? Only refs?
	case "$1" in
		-a)
			shift
			prefix=""
			msgprefix="everything"
			;;
		-r)
			shift
			prefix="\n(-- |\[[[:digit:]]+\])[^\n]*"
			msgprefix="references"
			;;
		*)
			prefix="\ntags:[^\n]*"
			msgprefix="tags"
	esac

	search="$@"

	# "Explode" the list of tags. This'll result in a list of
	# alternative search terms (boolean OR).
	search='('${search//[[:space:]]/|}')'

	# gawk will do all the magic.
	gawk '                                                              \
		BEGIN                                                           \
		{                                                               \
			RS="=== ";                                                  \
			print "Searching '"${msgprefix}"' for: '"${search}"'\n\n";  \
		};                                                              \
		                                                                \
		/'"${prefix}${search}"'/                                        \
		{                                                               \
			entrydate=FILENAME;                                         \
			gsub(/\.gitary/, "", entrydate);                            \
			gsub(/^.*\//, "", entrydate);                               \
			gsub(/\n+$/, "", $0);                                       \
			print "#############################################";      \
			print "               DAY: " entrydate;                     \
			print "#############################################";      \
			print "\n";                                                 \
			print "=== " $0 "\n\n\n\n";                                 \
		}'                                                              \
		"$datadir"/*gitary | $pager
}

edit()
{
	for i
	do
		$editor "$datadir/$i.gitary"
	done

	commit
}

viewall()
{
	(
		echo
		echo
		for i in "$datadir"/*gitary
		do
			bname=$(basename "$i")
			bname=${bname%%.*}
			echo "#############################################"
			echo "               DAY: $bname"
			echo "#############################################"
			echo
			echo
			cat "$i"
			echo
			echo
			echo
			echo
		done
	) | $pager
}

date_complete()
{
	# Given an incomplete date like "2010" or "2010-01", add the missing
	# part such that it points to the beginning of that time span. For
	# example, extend "2010" with "-01-01" meaning the very first moment
	# of the year 2010.

	OIFS=$IFS
	IFS='-'
	set -- $1
	IFS=$OIFS

	case $# in
		1) echo $1-01-01 ;;
		2) echo $1-$2-01 ;;
		3) echo $1-$2-$3 ;;
	esac
}

date_complete_next()
{
	# Like date_complete, but add one "entity". That is, "2010" will
	# become "2011" and "2010-04-12" will become "2010-04-13".

	OIFS=$IFS
	IFS='-'
	set -- $1
	IFS=$OIFS

	case $# in
		1) echo $(($1 + 1))-01-01                   ;;
		2) echo $(date -d "$1-$2-01 + 1 month" +%F) ;;
		3) echo $(date -d "$1-$2-$3 + 1 day" +%F)   ;;
	esac
}

topics()
{
	case $# in
		0)
			# Show all topics.
			r_start="0"
			r_end="z"
			;;
		1)
			# Show topics of one year, month or day.
			r_start=$(date_complete $1)
			r_end=$(date_complete_next $1)
			;;
		2)
			# Show all topics in a given range.
			r_start=$(date_complete $1)
			r_end=$(date_complete_next $2)
			;;
		*)
			return 1
			;;
	esac

	# Search matching filenames and print their topics.
	for i in "$datadir"/*gitary
	do
		day=$(basename "$i")
		day=${day%%.*}
		if [[ $day > $r_start ]] ||
			[[ $day == $r_start ]] &&
			[[ $day < $r_end ]]
		then
			# Extract all topic lines from that file.
			echo "$day"
			sed -rn 's/^=== (.*) ===$/\t\1/p' "$i"
		fi
	done | $pager
}

checkdatadir()
{
	if [[ ! -d "$datadir" ]]
	then
		echo "The data directory ($datadir) does not exist yet."
		read -p "Would you like to create it now? [y/N] "

		if [[ "$REPLY" == "Y" ]] || [[ "$REPLY" == "y" ]]
		then
			mkdir -p "$datadir" || return 1
			(
				cd "$datadir" || return 1
				git init || return 1
			) || return 1
		else
			return 1
		fi
	fi
}

addblobs()
{
	# Set a tag for these blobs? Essentially, a tag is a subdirectory.
	case "$1" in
		-t)
			tag="$2"
			shift
			shift
			;;
		*)
			tag=
			;;
	esac

	# Create a new subdirectory for today. %F is locale-independent.
	subdir="$datadir/blobs/$(date +%F)/$tag"
	mkdir -p "$subdir" || return 1

	for i
	do
		# Never overwrite existing files. cp doesn't inform us about
		# existing files, though, so show a warning.
		fname="$subdir/$(basename "$i")"
		[[ -e "$fname" ]] && echo "\`$i' already exists in today's blobs." >&2
		cp -n "$i" "$fname"
	done

	commit
}

printblobdir()
{
	readlink -e "$datadir/blobs"
}

# vim: set ts=4 sw=4 :
