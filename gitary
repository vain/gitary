#!/bin/bash

# Include further functions. Try the base directory of this script
# first; this allows to develop gitary inside the git repository. If
# that fails (i.e., if gitary is located in /usr/bin), then try
# /usr/lib.
base=$(dirname "$(readlink -e "$0")")
[[ -r "$base/gitary-functions" ]] && lib=$base || lib=/usr/lib/gitary
. "$lib"/gitary-functions || exit 1

# Use default settings as fallback.
default_prefix=${XDG_DATA_HOME:-$HOME/.local/share}
datadir=${GITARY_DATA:-$default_prefix/gitary}
editor=${EDITOR:-vim}
pager=${PAGER:-less}

# Check if the user only wants to view the help page. We have none.
# Refer to the man page.
opt=${1#-}
case "${opt#-}" in
	help|h)
		cat >&2 <<-EOF
		gitary is a diary using git as its backend.

		There is no summary page. If you need help, please have a look
		at the manual page (e.g., run "man gitary").
		EOF
		exit 1
		;;
esac

# Okay, now check the data dir and process all other options.
checkdatadir || exit 1

if [[ -z "$1" ]]
then
	# Create a new entry for today.
	edit "$(date +%F)"
	exit
fi

# Remove up to two leading dashes from $1.
case "${opt#-}" in
	tags)
		# Only search for tags.
		shift
		search -t "$@"
		;;
	refs)
		# Only search for references.
		shift
		search -r "$@"
		;;
	search)
		# Search whole entries.
		shift
		search "$@"
		;;
	gitk)
		(
			cd "$datadir"
			gitk --all
		)
		;;
	edit|view)
		# Edit or create an arbitrary entry.
		shift
		edit "$@"
		;;
	delete)
		# Delete existing entries (including any blobs) from the working
		# directory.
		shift
		delete "$@"
		;;
	viewall)
		# Show all entries in chronological order.
		viewall
		;;
	alltopics)
		# Show all topics. A time range may be given as an optional
		# argument.
		shift
		alltopics "$@"
		;;
	alltags)
		# Show all tags. Similar to --alltopics, a time range may be
		# given.
		shift
		alltags "$@"
		;;
	tagcloud)
		# Count tags. Similar to --alltopics, a time range may be
		# given.
		shift
		tagcloud "$@"
		;;
	addblobs)
		# Add all files as blobs for the current day.
		shift
		addblobs "$@"
		;;
	printblobdir)
		# Prints the blob directory, so you can easily work with it.
		printblobdir
		;;
	*)
		echo "$(basename "$0"): Invalid option \`$1'. See man page." >&2
		exit 1
		;;
esac

# vim: set ts=4 sw=4 :
